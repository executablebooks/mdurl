[build-system]
requires = ["flit_core>=3.2.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "mdurl"
version = "0.1.0"  # DO NOT EDIT THIS LINE MANUALLY. LET bump2version UTILITY DO IT
description = "Markdown URL utilities"
authors = [
    { name = "Taneli Hukkinen", email = "hukkin@users.noreply.github.com" },
]
license = { file = "LICENSE" }
requires-python = ">=3.6"
readme = "README.md"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
keywords = ["markdown", "commonmark"]

[project.urls]
"Homepage" = "https://github.com/executablebooks/mdurl"


[tool.flit.sdist]
exclude = [
    "tests/",
    ".*",
]


[tool.isort]
# Force imports to be sorted by module, independent of import type
force_sort_within_sections = true
# Group first party and local folder imports together
no_lines_before = ["LOCALFOLDER"]

# Configure isort to work without access to site-packages
known_first_party = ["mdurl", "tests"]

# Settings for Black compatibility
profile = "black"


[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config"
xfail_strict = true


[tool.tox]
legacy_tox_ini = '''
[tox]
# Only run pytest envs when no args given to tox
envlist = py{36,37,38,39}
isolated_build = True

[testenv:py{36,37,38,39}]
description = run tests
deps = -r tests/requirements.txt
commands =
    pytest {posargs}
'''


[tool.coverage.run]
source = ["mdurl"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Code for static type checkers
    "if TYPE_CHECKING:",
    # Scripts
    'if __name__ == .__main__.:',
]


[tool.mypy]
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
# Disabling incremental mode is required for `warn_unused_configs = true` to work
incremental = false
disallow_untyped_defs = true
check_untyped_defs = true
strict_equality = true
implicit_reexport = false
no_implicit_optional = true
overrides = [
    { module = "tests.*", disallow_untyped_defs = false },
]
